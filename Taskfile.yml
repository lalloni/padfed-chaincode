version: '2'

expansions: 10

output: prefixed

vars:

  # Para deploy a Nexus
  repository: 'padfed-bc-raw'
  system: 'padfed'
  application: 'padfed-chaincode'
  format: 'tar.xz'
  credentials: '{{ .HOME }}/.netrc'

  # Para publicación de tags
  remote: origin

  # Configuración interna
  target: 'target'
  gitversion:
    sh: git describe --abbrev=40 --tags HEAD
  gitdirty:
    sh: test -z "$(git status --short)" || echo -dirty
  publishversion: '{{ print .gitversion | trimAll "v" }}{{ .gitdirty }}'
  package: '{{ .target }}/{{ .application }}-{{ .publishversion }}.{{ .format }}'
  buildtime:
    sh: date +%s

env:
  GO111MODULE: on

tasks:

  tools:
    desc: 'Verifica la disponibilidad de herramientas'
    silent: true
    cmds:
      - command -v awk > /dev/null
      - command -v curl > /dev/null
      - command -v git > /dev/null
      - command -v go > /dev/null
      - command -v md5sum > /dev/null
      - command -v mkdir > /dev/null
      - command -v pwd > /dev/null
      - command -v rm > /dev/null
      - command -v sed > /dev/null
      - command -v sh > /dev/null
      - command -v tar > /dev/null
      - command -v test > /dev/null
      - command -v touch > /dev/null
      - command -v wc > /dev/null
      - eval "$(go version | sed -Ee 's/^.* go([^ ]+) .*$/\1/' | sed -Ee 's/[^0-9]*([0-9]*)[.]([0-9]*)(:?[.]([0-9]*))?([0-9A-Za-z-]*)/MAJOR="\1";MINOR="\2";PATCH="\3";EXTRA="\4"/')" && test $MAJOR -eq 1 -a $MINOR -gt 10 || (echo "La version de Go debe ser 1.11 o superior" ; exit 1)
      - command -v golangci-lint > /dev/null || sh -c 'curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.15.0'
      - mkdir '{{ .target }}' > /dev/null 2>&1 ; touch '{{ .target }}/tools.{{ .buildtime }}.witness'
    sources:
      - '{{ .target }}/tools.{{ .buildtime }}.witness'
    generates:
      - '{{ .target }}/tools.{{ .buildtime }}.witness'

  pre:
    desc: 'Prepara directorio de trabajo'
    deps: [ tools ]
    silent: true
    cmds:
      - cmd: mkdir -p "{{.target}}"
        ignore_error: true

  clean:
    desc: 'Limpia directorio de trabajo'
    deps: [ tools ]
    silent: true
    cmds:
      - rm -rf "{{ .target }}"

  vendor:
    deps: [ tools ]
    cmds:
      - go mod vendor
    sources:
      - go.mod
    generates:
      - vendor/modules.txt

  check:
    desc: 'Realiza análisis estático de código fuente'
    deps: [ pre ]
    silent: true
    cmds:
      - golangci-lint run
      - touch "{{ .target }}/check.witness"
    sources:
      - '**/*.go'
    generates:
      - '{{ .target }}/check.witness'

  test:
    desc: 'Ejecuta tests'
    deps: [ pre, vendor ]
    silent: true
    cmds:
      - go test -mod=vendor ./...
      - touch "{{ .target }}/test.witness"
    sources:
      - '**/*.go'
    generates:
      - '{{ .target }}/test.witness'

  compile:
    desc: 'Compila binario ejecutable'
    deps: [ pre, vendor ]
    vars:
      binary: '{{ .target }}/chaincode'
    silent: true
    cmds:
      - go build -mod=vendor -o "{{ .binary }}" main.go version.go
    sources:
      - '**/*.go'
    generates:
      - '{{.binary}}'

  package:
    desc: 'Empaqueta fuentes para instalar en Fabric'
    deps: [ check, test, compile ]
    silent: true
    cmds:
      - tar -caf "{{ .package }}" --exclude="{{ .target }}/*" --exclude-vcs --exclude-vcs-ignore *
    sources:
      - '**/*.go'
    generates:
      - '{{ .package }}'

  upload:
    deps: [ tools ]
    silent: true
    cmds:
      - echo 'Uploading {{ .file }} to https://nexus.cloudint.afip.gob.ar/nexus/repository/{{ .repository}}/{{ .system }}/{{ .application }}/{{ .version }}/'
      - curl --progress-bar --fail --noproxy "*" --cacert ca.crt --netrc-file "{{ .credentials }}" --upload-file "{{ .file }}" "https://nexus.cloudint.afip.gob.ar/nexus/repository/{{ .repository}}/{{ .system }}/{{ .application }}/{{ .version }}/"

  publish:
    desc: Publica el archivo de fuentes empaquetados a Nexus (ver salida de "task --summary publish" para mayores detalles)
    summary: |
      Publica el archivo de fuentes empaquetados a Nexus.

      Uitilizar el parámetro 'credentials' para referirse al archivo netrc que
      contiene las  credenciales a presentar a Nexus.
      Si no se suministra utiliza $HOME/.netrc.

      Ejemplo
        task publish credentials=/path/a/archivo.netrc
    deps: [ tools ]
    silent: true
    cmds:
      - cmd: test -f "{{ .credentials }}" || (echo 'No existe archivo de credenciales (ver salida de "task --summary publish")' ; exit 1)
      - task: package
        vars:
          package: '{{ .package }}'
      - cmd: md5sum -b '{{ .package }}' | awk '{printf $1}' > '{{ .package }}.md5'
      - task: upload
        vars:
          file: '{{ .package }}.md5'
          version: '{{ .publishversion }}'
          credentials: '{{ .credentials }}'
      - task: upload
        vars:
          file: '{{ .package }}'
          version: '{{ .publishversion }}'
          credentials: '{{ .credentials }}'

  release:
    desc: 'Genera y publica una nueva release (ver salida de "task --summary release" para mayores detalles)'
    summary: |
      Genera y publica una nueva release.

      Utilizar el parámetro 'version' (requerido) para especificar la versión a
      generar. Debe ser una versión semántica (i.e. MAJOR.MINOR.PATCH).
      Ver detalles sobre versionado semántico en https://semver.org/.

      Utilizar el parámetro 'credentials' para referirse al archivo netrc que
      contiene las  credenciales a presentar a Nexus para publicar la versión.
      Si no se suministra se utilizará $HOME/.netrc.
      Ver detalles acerca del formato en https://goo.gl/GdA6u5.

      Esta tarea requiere que todos los archivos del directorio de trabajo
      pertenezcan a un commit de git. Esto significa que no debe haber archivos
      nuevos, archivos modificados ni cambios en el stage de git.
      En otras palabras, la salida de "git status -s" debe ser nula.

      Ejemplo
        task release version=X.Y.Z credentials=/path/a/archivo.netrc
    deps: [ tools ]
    vars:
      package: '{{ .target }}/{{ .application }}-{{ .version }}.{{ .format }}'
    silent: true
    cmds:
      - cmd: test '{{ .version }}' != '<no value>' || (echo 'Falta especificar la versión a generar (ver salida de "task --summary release")' ; exit 1)
      - cmd: echo '{{ .version }}' | grep -qE '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-[0-9a-z-]+(\.[0-9a-z-]+)*)?(\+[0-9a-z-]+(\.[0-9a-z-]+)*)?$' || (echo 'El identificador de version "{{ .version }}" no cumple con SemVer (ver salida de "task --summary release")' ; exit 1)
      - cmd: test $(git status -s | wc -l) -eq 0 || (echo 'Hay archivos modificados o nuevos o hay cambios el index de git' ; exit 1)
      - cmd: test -f '{{ .credentials }}' || (echo 'No existe archivo de credenciales (ver salida de "task --summary publish")' ; exit 1)
      - task: check
      - task: test
      - cmd: git tag -s 'v{{ .version }}' -m 'Release {{ .version }}'
      - cmd: rm -rf '{{ .target }}/release'
        ignore_error: true
      - cmd: git clone . '{{ .target }}/release'
      - cmd: sed -e 's/dev/{{ .version }}/' version.go >'{{ .target }}/release/version.go'
      - cmd: cd '{{ .target }}/release' && echo "checking out v{{.version}} at $(pwd)" && git checkout --quiet 'v{{ .version }}'
      - cmd: task --dir '{{ .target }}/release' publish package='{{ .package }}' publishversion='{{ .version }}' credentials='{{ .credentials }}'
      - cmd: git push '{{ .remote }}' tag 'v{{ .version }}'

  coverreport:
    desc: 'Genera reporte de cobertura de tests'
    deps: [ pre, vendor ]
    silent: true
    cmds:
      - go test -mod=vendor -cover -coverprofile='{{ .target }}/cover.dat' ./...
      - touch '{{ .target }}/cover.witness'
    sources:
      - '**/*.go'
    generates:
      - '{{.target}}/cover.witness'

  cover:
    desc: 'Muestra reporte de cobertura de tests'
    deps: [ coverreport ]
    silent: true
    cmds:
      - go tool cover -html '{{ .target }}/cover.dat'
