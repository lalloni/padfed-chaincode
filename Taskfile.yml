version: '2'

expansions: 10

vars:

  # Para deploy a Nexus
  repository: 'sandbox-raw'
  system: 'padfed'
  application: 'padfed-chaincode'
  format: 'tar.xz'
  credentials: '{{ .HOME }}/.netrc'

  # Configuración interna
  target: 'target'
  gitversion:
    sh: git describe --abbrev=40 --tags HEAD
  gitdirty:
    sh: test -z "$(git status --short)" || echo -dirty
  publishversion: '{{ print .gitversion | trimAll "v" }}{{ .gitdirty }}'
  package: '{{ .target }}/{{ .application }}-{{ .publishversion }}.{{ .format }}'

tasks:

  tools:
    desc: 'Verifica la disponibilidad de herramientas'
    silent: true
    cmds:
      - command -v rm > /dev/null
      - command -v mkdir > /dev/null
      - command -v tar > /dev/null
      - command -v curl > /dev/null
      - command -v test > /dev/null
      - command -v touch > /dev/null
      - command -v git > /dev/null
      - command -v go > /dev/null
      - command -v md5sum > /dev/null
      - command -v awk > /dev/null
      - command -v golangci-lint > /dev/null || env GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@1.15.0

  pre:
    desc: 'Prepara directorio de trabajo'
    deps: [ tools ]
    silent: true
    cmds:
      - cmd: mkdir -p "{{.target}}"
        ignore_error: true

  clean:
    desc: 'Limpia directorio de trabajo'
    deps: [ tools ]
    cmds:
      - rm -rf "{{ .target }}"

  check:
    desc: 'Realiza análisis estático de código fuente'
    deps: [ pre ]
    cmds:
      - golangci-lint run
      - touch "{{ .target }}/check.witness"
    sources:
      - '**/*.go'
    generates:
      - '{{ .target }}/check.witness'

  test:
    desc: 'Ejecuta tests'
    deps: [ pre ]
    cmds:
      - go test ./...
      - touch "{{ .target }}/test.witness"
    sources:
      - '**/*.go'
    generates:
      - '{{ .target }}/test.witness'

  compile:
    desc: 'Compila binario ejecutable'
    deps: [ pre ]
    vars:
      binary: '{{ .target }}/chaincode'
    cmds:
      - go build -o "{{ .binary }}" main.go
    sources:
      - '**/*.go'
    generates:
      - '{{.binary}}'

  package:
    desc: 'Empaqueta fuentes para instalar en Fabric'
    deps: [ check, test, compile ]
    cmds:
      - tar -caf "{{ .package }}" --exclude="{{ .target }}/*" --exclude-vcs --exclude-vcs-ignore *
    sources:
      - '**/*.go'
    generates:
      - '{{ .package }}'

  _upload:
    deps: [ tools ]
    cmds:
      - curl --progress-bar --fail --noproxy "*" --netrc-file "{{ .credentials }}" --upload-file "{{ .file }}" "https://nexus.cloudint.afip.gob.ar/nexus/repository/{{ .repository}}/{{ .system }}/{{ .application }}/{{ .version }}/"

  publish:
    desc: Publica el archivo de fuentes empaquetados a Nexus (ver salida de "task --summary publish" para mayores detalles)
    summary: |
      Publica el archivo de fuentes empaquetados a Nexus.

      Uitilizar el parámetro 'credentials' para referirse al archivo netrc que
      contiene las  credenciales a presentar a Nexus.
      Si no se suministra utiliza $HOME/.netrc.

      Ejemplo
        task publish credentials=/path/a/archivo.netrc
    deps: [ tools ]
    cmds:
      - cmd: test -f "{{ .credentials }}" || (echo 'No existe archivo de credenciales (ver salida de "task --summary publish")' ; exit 1)
        silent: true
      - task: package
        vars:
          package: '{{ .package }}'
      - md5sum '{{ .package }}' | awk '{printf $1}' > '{{ .package}}.md5'
      - task: _upload
        vars:
          file: '{{ .package }}.md5'
          version: '{{ .publishversion }}'
          credentials: '{{ .credentials }}'
      - task: _upload
        vars:
          file: '{{ .package }}'
          version: '{{ .publishversion }}'
          credentials: '{{ .credentials }}'

  release:
    desc: 'Genera y publica una nueva release (ver salida de "task --summary release" para mayores detalles)'
    summary: |
      Genera y publica una nueva release.

      Utilizar el parámetro 'version' (requerido) para especificar la versión a generar.
      Debe ser una versión semántica.

      Uitilizar el parámetro 'credentials' para referirse al archivo netrc que
      contiene las  credenciales a presentar a Nexus para publicar la versión.
      Si no se suministra se utilizará $HOME/.netrc.
      Ver detalles acerca del formato en https://goo.gl/GdA6u5.

      Ejemplo
        task release version=X.Y.Z credentials=/path/a/archivo.netrc
    deps: [ tools ]
    vars:
      package: '{{ .target }}/{{ .application }}-{{ .version }}.{{ .format }}'
    cmds:
      - cmd: test "{{ .version }}" != "<no value>" || (echo 'Falta especificar la versión a generar (ver salida de "task --summary release")' ; exit 1)
        silent: true
      - cmd: test -f "{{ .credentials }}" || (echo 'No existe archivo de credenciales (ver salida de "task --summary publish")' ; exit 1)
        silent: true
      - git tag -s "v{{ .version }}" -m "Release {{ .version }}"
      - task: publish
        vars:
          package: '{{ .package }}'
          publishversion: '{{ .version }}'
          credentials: '{{ .credentials }}'

  coverreport:
    desc: 'Genera reporte de cobertura de tests'
    deps: [ pre ]
    cmds:
      - go test -cover -coverprofile="{{ .target }}/cover.dat" ./...
      - touch "{{ .target }}/cover.witness"
    sources:
      - '**/*.go'
    generates:
      - '{{.target}}/cover.witness'

  cover:
    desc: 'Muestra reporte de cobertura de tests'
    deps: [ coverreport ]
    cmds:
      - go tool cover -html "{{ .target }}/cover.dat"
